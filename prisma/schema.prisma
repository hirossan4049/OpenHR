// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   // For email/password authentication
    role          String    @default("MEMBER") // ADMIN, MEMBER, VIEWER
    // Profile information
    bio           String?
    grade         String?
    contact       String?
    githubUrl     String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    userSkills    UserSkill[]
    discordMembers DiscordMember[] // Discord members linked to this user
    // Project relations
    organizedProjects Project[] @relation("ProjectOrganizer")
    projectApplications ProjectApplication[] @relation("ProjectApplications")
    projectMemberships ProjectMember[] @relation("ProjectMembers")
    // Tag relations
    userTags      UserTag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Skill {
    id          String      @id @default(cuid())
    name        String      @unique
    slug        String      @unique
    category    String?
    logoUrl     String?
    aliases     String?     // JSON array of alternative names
    verified    Boolean     @default(false) // True for officially managed skills
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    userSkills  UserSkill[]
    projectRequiredSkills ProjectRequiredSkill[]
}

model UserSkill {
    id            String   @id @default(cuid())
    userId        String
    skillId       String
    level         Int      // 1-5 scale or similar
    yearsOfExp    Int?     // Years of experience
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
    
    @@unique([userId, skillId])
}

// Discord server member information
model DiscordMember {
    id               String    @id @default(cuid())
    discordId        String    // Discord user ID
    guildId          String    // Discord server/guild ID
    username         String    // Discord username
    discriminator    String?   // Discord discriminator (legacy)
    displayName      String?   // Discord display name
    avatar           String?   // Discord avatar hash
    joinedAt         DateTime? // When user joined the Discord server
    userId           String?   // Link to OpenHR User if connected
    syncedAt         DateTime  @default(now())
    syncStatus       String    @default("active") // active, left, error
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    
    user             User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
    guildSync        GuildSync @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
    
    @@unique([discordId, guildId])
    @@index([guildId])
    @@index([userId])
}

// Discord server synchronization status
model GuildSync {
    id             String        @id @default(cuid())
    guildId        String        @unique // Discord server/guild ID
    guildName      String?       // Discord server name
    lastSyncedAt   DateTime?     // Last successful sync
    status         String        @default("pending") // pending, syncing, completed, error
    totalMembers   Int?          // Total members found in last sync
    syncedMembers  Int?          // Successfully synced members
    lastError      String?       // Last error message
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    
    members        DiscordMember[]
}

// Project/Event model
model Project {
    id               String              @id @default(cuid())
    title            String
    description      String
    type             String              @default("project") // "project" or "event"
    recruitmentStatus String             @default("open") // "open" or "closed"
    maxMembers       Int?                // Maximum number of members
    startDate        DateTime?           // Project/Event start date
    endDate          DateTime?           // Project/Event end date
    
    // Relations
    organizerId      String
    organizer        User                @relation("ProjectOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
    
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
    
    // Related models
    requiredSkills   ProjectRequiredSkill[]
    applications     ProjectApplication[]
    members          ProjectMember[]
    
    @@index([organizerId])
    @@index([recruitmentStatus])
    @@index([type])
}

// Required skills for a project
model ProjectRequiredSkill {
    id            String   @id @default(cuid())
    projectId     String
    skillId       String
    minLevel      Int      @default(1) // Minimum skill level required (1-5)
    priority      String   @default("required") // "required" or "preferred"
    
    project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
    
    @@unique([projectId, skillId])
    @@index([projectId])
    @@index([skillId])
}

// Project applications
model ProjectApplication {
    id            String   @id @default(cuid())
    projectId     String
    applicantId   String
    status        String   @default("pending") // "pending", "approved", "rejected"
    message       String?  // Application message from user
    response      String?  // Response from organizer
    
    project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    applicant     User     @relation("ProjectApplications", fields: [applicantId], references: [id], onDelete: Cascade)
    
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    @@unique([projectId, applicantId])
    @@index([projectId])
    @@index([applicantId])
    @@index([status])
}

// Approved project members
model ProjectMember {
    id            String   @id @default(cuid())
    projectId     String
    userId        String
    role          String   @default("member") // "member", "moderator", etc.
    joinedAt      DateTime @default(now())
    
    project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user          User     @relation("ProjectMembers", fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([projectId, userId])
    @@index([projectId])
    @@index([userId])
}

// Tag model for user tagging
model Tag {
    id          String    @id @default(cuid())
    name        String    @unique
    color       String    // HEX color code like #FF5733
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    userTags    UserTag[]
}

// Many-to-many relationship between User and Tag
model UserTag {
    id        String   @id @default(cuid())
    userId    String
    tagId     String
    createdAt DateTime @default(now())
    
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
    
    @@unique([userId, tagId])
    @@index([userId])
    @@index([tagId])
}
